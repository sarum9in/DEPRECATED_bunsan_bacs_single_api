package bacs.problem.single.api.pb.settings;

import "bacs/problem/single/api/pb/resource.proto";

// should be moved into testing
// this file declares process-related settings
message TestGroupSettings
{
    required Run run = 1;
    required ProcessSettings process = 2;
}

message Run
{
    enum Order
    {
        NUMERIC = 0;         ///< Non-numeric tests will be removed from test_set.
        LEXICOGRAPHICAL = 1;
    }
    enum Algorithm
    {
        ALL = 0;             ///< Test group is OK in any case.
        WHILE_NOT_FAIL = 1;  ///< Test group is OK only if every test is OK.
    }
    required Order order = 1;
    required Algorithm algorithm = 2;
}

message ProcessSettings
{
    required ResourceLimits resource_limits = 1;
    repeated File files = 2;
    required Execution execution = 3;
}

message Execution
{
    message Redirection
    {
        enum Stream
        {
            STDIN = 0;
            STDOUT = 1;
            STDERR = 2;
        }
        required Stream stream = 1;
        required string file_id = 2;
    }
    repeated string arguments = 1;
    optional Path current_path = 2;        // not supported (will be ignored)
    repeated Redirection redirections = 3;
}

/// Filesystem path.
message Path
{
    /// If specified, path is absolute, otherwise -- relative.
    optional string root = 1;
    /// Path elements, will be concatenated using OS-specific delimiter.
    repeated string elements = 2;
}

message File
{
    enum Permissions
    {
        READ = 0;
        WRITE = 1;
        EXECUTE = 2;
    }

    message Range
    {
        enum Whence
        {
            BEGIN = 0;
            END = 1;
        };
        /// Position from which offset will be calculated.
        required Whence whence = 1;
        /// Negative or positive offset from position specified by whence field.
        required int64 offset = 2;
        /// Size of chunk will be transmitted (if EOF reached size of chunk may be smaller).
        required uint64 size = 3;
    }

    required string id = 1;
    repeated Permissions permissions = 2;
    optional /*DataId*/string init = 3;
    optional Path path = 4; // note: arbitrary paths are not supported, path will be stripped to filename
    optional Range receive = 5;
}
